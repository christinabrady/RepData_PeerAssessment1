fit2 <- lm(Volume~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility~., swiss)
summary(all)
summary(lm(Fertility~Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
play()
with(swiss, cor(Agriculture, Catholic))
with(swiss, cor(Education, Catholic))
with(swiss, cor(Fertility, Catholic))
nxt()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~. +ec, swiss)
?
()
summary(all)$coef-summary(efit)$coef
all$coefficients-efit$coefficients
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
q1 <- lm(y~x)
summary(q1)
library(datasets)
data(mtcars)
q3 <- lm(mpg~wt)
q3 <- lm(mpg~wt, mtcars)
summary(q3)
sumCoef <- summary(q3)$coefficients
sumCoef
ci <- sumCoef[2,1]+c(-1,1)*qt(.975, df=q3$df)*sumCoef[2,2]
ci
mean(mtcars$wt)
empg <- sumCoef[1,1] + sumCoef[2,1]*mean(mtcars$wt)
empg + ci
?mtcars
(sumCoef[1,1] + 3*sumCoef[2,1])+ci
?predict()
predict(q3, mean(mtcars$wt))
cars <- lm(mpg~wt, mtcars)
predict(cars, mean(mtcars$wt))
mean(mtcars$wt)
predict(cars, 3.21725)
predict(mean(mtcars$wt), cars)
predict(cars, mean(mtcars$wt), data=mtcars)
new.cars <- c(mean(mtcars$wt), 3)
predict(cars, newdata=new.cars)
new.cars
new.cars <- data.frame(wt=c(mean(mtcars$wt), 3))
new.cars
predict(cars, newdata=new.cars)
predict(cars, newdata=new.cars, interval="prediction")
new.cars[3,1] <- 2
new.cars
predict(cars, newdata=new.cars, interval="prediction")
predict(cars, newdata=new.cars)
predict(cars, newdata=new.cars)+ ci
predictions <- predict(cars, newdata=new.cars)
predictions +ci
predictions[1] +ci
ci
predictions[1]
cor(mtcars$mpg, mtcars$wt)
rm(list+lss())
rm(list+ls())
rm(list=ls())
data(mtcars)
cars <- lm(mpg~wt, mtcars)
summary(cars)
carcoef <- cars$coefficients
carcoef
carcoef <- summary(cars)$coefficients
carcoef
carci <- carcoef[2,1] + c(-1,1)*qt(.975, df=cars$df)*carcoef[2,2]
carcoef[1,1] + carcef[2,1]*2
carcoef[1,1] + carcoef[2,1]*2
shortton <- carcoef[1,1] + carcoef[2,1]*2
shortton +ci
shortton +carci
cars2 <- lm(mgp~(wt*2), mtcars)
cars2 <- lm(mgp~I(wt*2), mtcars)
cars2 <- lm(mpg~I(wt*2), mtcars)
summary(cars2)
cars2 <- lm(mpg~I(wt*.5), mtcars)
summary(cars2)
car2coef <- summary(cars2)$coefficients
car2ci <- car2coef[2,1] + c(-1,1)*qt(.975, df=cars2$df)*car2coef[2,2]
car2ci
cars2 <- lm(mpg~I(wt*2), mtcars)
car2ci <- car2coef[2,1] + c(-1,1)*qt(.975, df=cars2$df)*car2coef[2,2]
car2ci
car2coef <- summary(cars2)$coefficients
car2ci <- car2coef[2,1] + c(-1,1)*qt(.975, df=cars2$df)*car2coef[2,2]
car2ci
library(UsingR)
data(diamond)
fit <- lm(price~carat, data=diamond)
summary(fit)
fit2 <- lm(price~I(carat*10), data=diamond)
fit2
avcar <- lm(mpg~I(wt-mean(wt)), data=mtcars)
avcoef <- summary(avcar)$coefficients
avcoef
avcar[1,1] - qt(.975, df=avcar$df)*avcoef[1,2]
avcar[1,1]
avcoef[1,1] - qt(.975, df=avcar$df)*avcoef[1,2]
coef(fit)[1]
fit
coef(fit)[2]
cars
new_car <- coef(cars)[1] + 3*coef(cars)[2]
new <- predict(cars, newdata=data.frame(wt=new_car))
new
new.car
new_car
new_car + carsci
new_car + carci
new <- predict(cars, newdata=data.frame(wt=new_car), interval="confidence")
summary(new)
new
new2 <- predict(cars, newdata=data.frame(wt=3), interval="confidence")
new2
new3 <- predict(cars, newdata=data.frame(wt=3), interval="prediction")
new3
q6 <- lm(mpg~I(wt*2), data=mtcars)
summary(q6)
q6coef <- summary(q6)$coefficients
q6coef[2,1] c(-1,1)*qt(.975, df=q6$df)*q6coef[2,2]
q6coef[2,1]+c(-1,1)*qt(.975, df=q6$df)*q6coef[2,2]
q6 <- lm(mpg~I(wt*.5), data=mtcars)
q6coef <- summary(q6)$coefficients
q6coef[2,1]+c(-1,1)*qt(.975, df=q6$df)*q6coef[2,2]
summary(q6)
summary(cars)
install.packages("caret")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type~.,data=training, method="glm")
install.packages("e1071")
set.seed(32343)
modelFit <- train(type~.,data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
confusionMatrix(predictions, testing$type)
16/16
18/22
16/(3.14*8^2)
22/(3.14*9^2)
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(wage)
summary(wage)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain, ]
testing <- Wage[-inTrain, ]
dim(training); dim(testing)
featurePlot(x=training[, c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, data=training)
qplot(age, wage, colour=jobclass, data=training)
qq <- qplot(age, wage, colour=education, data=training)
qq +geom_smooth(method='lm', formula=y~x)
cutWage <- cut2(training$wage, g=3)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot")
)
p1
p2 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot", "jitter")
)
grid.arrange(p1,p2, ncol=2)
plot(wage, colour=education, data=training, geom="density")
qplot(wage, colour=education, data=training, geom="density")
names(gss)
summary(gss.12)
summary(gss12)
nrow(gss12)
interest <- c("age", "sex", "race", "hispanic", "educ", "siblings", "coninc", "region", "religion", "attend", "class", "union", "tvhours", "helppoor")
gssint <- gss12[, names(gss12) %in% interest]
names(gssint)
summary(gssint)
gssint <- omit.na(gssint)
gssint <- na.omit(gssint)
summary(gssint)
gssint <- gss12[, names(gss12) %in% interest]
str(gssint)
?na.omit
View(gssint)
?featurePlot
featurePlot(gssint, "scatter")
featurePlot(x=gssint, y=gssint$helppoor, plot="pairs")
interest <- c("age", "sex", "race", "hispanic", "educ", "coninc", "religion", "class", "union", "tvhours", "helppoor")
gssint <- gss12[, names(gss12) %in% interest]
getahead <- c("getahead", "coninc", "educ", "tvhours", "sex")
gssahead <- gss12[, names(gss12) %in% getahead]
summary(gssahead)
featurePlot(x=gssahead, y=gssahead$getahead, plot="pairs")
mosaicplot(gss12$educ, gss12$getahead)
mosaicplot(table(gss12$educ, gss12$getahead))
head(gss12$coninc)
plot(gss12$getahead~gss12$coininc)
plot(gss12$getahead,gss12$coininc)
mosaicplot(table(gss12$class, gss12$getahead))
mosaicplot(table(gss12$sex, gss12$getahead))
upper <- gss12[, class=="upper"]
upper <- gss12[, gss12$class=="upper"]
upper <- subset(gss12, gss12$class=="upper")
summary(upper)
upper2 <- upper[, c("age", "coninc", "educ")]
summary(upper2)
str(gss12$class)
names(gss12$class)
summary(gss12$class)
upper <- subset(gss12, gss12$class=="Upper Class")
upper2 <- upper[, c("age", "coninc", "educ")]
summary(upper2)
table(upper2~.)
table(upper2)
summary(upper2)
nrow(upper2)
nrow(gss12)
summary(gss12$coninc)
table(gss12$coninc)
table(gss12$class)
prop.table(gss12$class)
prop.table(gss12$class,1)
prop.table(table(gss12$class,1))
prop.table(table(gss12$class))
table(upper2$degree)
summary(upper2$degree)
table(upper2$educ)
with(gss12, table(degee~paeduc+maeduc))
with(gss12, tapply(table(degee~paeduc+maeduc))
)
with(gss12, tapply(degree, table(paeduc, maeduc))
)
with(gss12, table(degree, paeduc))
hist(gss12$paeduc)
hist(gss12$paeduc, bins=20)
?hist()
hist(gss12$paeduc, breaks=20)
hist(gss12$educ, breaks=20)
hist(gss12$maeduc, breaks=20)
mosaicplot(table(gss12$class, gss12$degree))
x <- <- c("age", "sex", "race", "hispanic", "educ", "coninc", "religion", "class", "union", "getahead")
x <- c("age", "sex", "race", "hispanic", "educ", "coninc", "religion", "class", "union", "getahead")
gssx <- gss12[, names(gss12) %in% x]
gsstrain <- createDataPartition(y=gssx$getahead, p=.7, list=FALSE)
gsslit <- createDataPartition(y=gssx$getahead, p=.7, list=FALSE)
gsstrain <- gssx[gsslit]
gsstest <- gssx[-gsslit]
summary(gsstrain)
summary(gssx)
library(caTools)
sample.split(gssx$getahead, SplitRation=.7)
sample.split(gssx$getahead, SplitRatio=.7)
split <- sample.split(gssx$getahead, SplitRatio=.7)
gssxtrain <- subset(gssx, split=TRUE)
gssxtest <- subset(gssx, split=FALSE)
gssxtrain <- subset(split, split=TRUE)
gssxtrain <- subset(split, split==TRUE)
str(gssx)
inTrain <- createDataPartition(y=gssx$getahead, p=.7, list=FALSE)
gssxtrain <- gssx[inTrain]
gssxtest <- gssx[-inTrain]
dim(gssxtrain)
gssxtrain <- gssx[inTrain,]
gssxtest <- gssx[-inTrain,]
summary(gssxtrain)
gsslm1 <- lm(getahead~., gssxtrain)
str(gssxtrain)
summary(gsslm1)
gsslm1 <- lm(getahead~age, gssxtrain)
gssxtrain$getahead <- as.character(gssxtrain$getahead)
gsslm1 <- lm(getahead~age, gssxtrain)
summary(gssxtrain$getahead)
summary(gssxtrain$age)
summary(faithful)
View(gssxtrain)
lm(getahead~age, data=gssxtrain)
lm(getahead=="Hard Work"~age, data=gssxtrain)
lm(getahead=="Hard Work"~., data=gssxtrain)
gsslm1 <- lm(getahead=="Hard Work"~., data=gssxtrain)
summary(gsslm1)
gsslm2 <- lm(getahead=="Hard Work"~educ, gssxtrain)
summary(gsslm2)
gsslm2 <- lm(getahead=="Hard Work"~union, gssxtrain)
summary(gsslm2)
gsslm3 <- lm(getahead=="Hard Work"~coninc, gssxtrain)
summary(gsslm3)
inc <- lm(coninc~educ, data=gss12)
summary(inc)
mgg6 <- lm(mpg~., data=mtcars)
summary(mgg6)
library(ggplot2)
?ggplot
g <- ggplot(mtcars, aes(x=am, y=mpg))+geom_boxplot()
g
g <- ggplot(mtcars, aes(x=am, y=factor(mpg)))+geom_boxplot()
g
g <- ggplot(mtcars, aes(x=factor(am), y=mpg))+geom_boxplot()
g
colnames(mtcars)
head(mtcars$am)
mtcars[mtcars$am==1] <- "automatic"
mtcars$am[mtcars$am==1] <- "automatic"
mtcars$am[mtcars$am==0] <- "manual"
summary(mtcars$am)
table(mtcars$am)
g <- g + xlab("mpg") + ylab("Transmission type")
g
g <- g + labs(x="Transmission Type", y="mpg", title="Plot A")
g
with(mtcars, plot(mpg, wt))
g2 <- ggplot(mtcars, aes(x=mpg, y=wt)+geom_point(color=factor(am)) +labs(x="mpg"", y="weight"", title = "Plot B")
g2 <- ggplot(mtcars, aes(x=mpg, y=wt)+geom_point(color=factor(am)) +labs(x="mpg", y="weight", title = "Plot B")
g2 <- ggplot(mtcars, aes(x=mpg, y=wt))+geom_point(color=factor(am)) +labs(x="mpg", y="weight", title = "Plot B")
g2 <- ggplot(mtcars, aes(x=mpg, y=wt))+geom_point(color=factor(mtcars$am)) +labs(x="mpg", y="weight", title = "Plot B")
g2
g2 <- ggplot(mtcars, aes(x=mpg, y=wt))+geom_point() +labs(x="mpg", y="weight", title = "Plot B")
g2
g2 <- ggplot(mtcars, aes(x=mpg, y=wt, color=am))+geom_point() +labs(x="mpg", y="weight", title = "Plot B")
g2
g2 <- ggplot(mtcars, aes(x=mpg, y=wt, color=am))+geom_point() +labs(x="mpg", y="weight", title = "Plot B", color="Transmission Type")
g2
table(mtcars$cyl, mtcars$am)
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(grid)
gC1 <- ggplot(mtcars, aes(x=mpg, y=hp, color=am)) + geom_point() +labs(x="mpg", y="horsepower", title = "Plot C1", color = "Transmission Type")
library(ggplot2)
gC1 <- ggplot(mtcars, aes(x=mpg, y=hp, color=am)) + geom_point() +labs(x="mpg", y="horsepower", title = "Plot C1", color = "Transmission Type")
gC1 <- ggplot(mtcars, aes(x=mpg, y=hp, color=am)) + geom_point() +labs(x="mpg", y="horsepower", title = "Plot C1", color = "Transmission Type")
grid.arrange(gC1, gC2)
library(gridExtra)
install.packages('gridExtra')
library(gridExtra)
grid.arrange(gC1, gC2)
gC1 <- ggplot(mtcars, aes(x=mpg, y=hp, color=am)) + geom_point() +labs(x="mpg", y="horsepower", title = "Plot C1", color = "Transmission Type")
gC2 <- ggplot(mtcars, aes(x=mpg, y=log(hp), color=am)) + geom_point() +labs(x="mpg", y="log(horsepower)", title = "Plot C2", color = "Transmission Type")
grid.arrange(gC1, gC2)
?grid.arrange
grid.arrange(gC1, gC2, as.table=TRUE)
grid.arrange(gC1, gC2)
?plot
str(mtcars)
?mtcars
install.packages("xtable")
library(xtable)
?xtable
library(datasets)
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/rmarkdown")
xtable(anova(mpg1, mpg2, mpg3, mpg4))
?fig.pos
library(datasets)
library(ggplot2)
gB <- ggplot(mtcars, aes(x=mpg, y=wt, color=am)) + geom_point() +labs(x="mpg", y="weight", title = "Plot B", color = "Transmission")
?abline
gB2 <- gB + geom_smooth(method=lm, se=FALSE)
gB2
gC1 <- ggplot(mtcars, aes(x=mpg, y=hp, color=am)) + geom_point() +labs(x="mpg", y="horsepower", title = "Plot C \n Transmission vs hp", color = "Transmission") + geom_smooth(se=FALSE)
gC1
gC1 <- ggplot(mtcars, aes(x=mpg, y=hp, color=am)) + geom_point() +labs(x="mpg", y="horsepower", title = "Plot C \n Transmission vs hp", color = "Transmission") + geom_smooth(method="loess", se=FALSE)
gC1
rm(list=ls())
setwd("~/Documents/Coursera courses/Data Science Specialization/Reproducible Research/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
str(activity)
head(activity)
summary(activity$steps)
summary(activity)
activity$date <- as.date(activity$date)
activity$date <- as.ate(activity$date)
activity$date <- as.Date(activity$date)
activity$interval <- as.factor(activity$interval)
with(activity, tapply(steps, date, sum))
totalperday <- with(activity, tapply(steps, date, sum))
hist(totalperday)
summary(totalperday)
totalperday <- as.data.frame(with(activity, tapply(steps, date, sum)))
head(totalperday)
colnames(totalperday) <- c("Date", "Steps")
str(totalperday)
?tapply
totalperday <- as.data.frame(with(activity, tapply(steps, date, sum)))
totalperday[1,1]
day1 <- totalperday[1][2]
day1 <- totalperday[1,1][2]
day1
daily <- with(activity, tapply(steps, date, sum))
head(daily)
daily[1,1]
daily[1]
daily[1][2]
daily[1][1]
length(daily)
str(daily)
daily2 <- aggregate(activity, by=date, sum)
daily2 <- aggregate(activity, by=activity$date, sum)
head(activity)
daily2 <- aggregate(activity$steps, by=activity$date, sum)
daily2 <- aggregate(activity$steps, activity$date, sum)
daily2 <- aggregate(activity$steps, list(activity$date), sum)
head(daily2)
str(daily2)
daily <- aggregate(activity$steps, list(activity$date), sum)
colnames(daily) <- c("Date", "Steps")
head(daily)
hist(daily$Date, daily$Steps)
hist(daily$Date, daily$Steps, breaks=20)
hist(daily$steps)
str(daily)
?hist
hist(daily$Steps, breaks=daily$Date)
hist(daily$Steps)
library(ggplot2)
?ggplot
g <- ggplot(daily, aes(x=Date, y=Steps)) + geom_hist()
g <- ggplot(daily, aes(x=Date, y=Steps)) + geom_histogram()
g
g <- ggplot(daily, aes(x=Date, y=Steps)) + geom_histogram(stat="identity")
g
summary(activity$date)
dailymean <- aggregate(activity$steps, list(activity$date), mean)
colnames(dailymean) <- c("Date", "Steps")
dailymedian <- aggregate(activity$steps, list(activity$date), median)
colnames(dailymedian) <- c("Date", "Steps")
head(dailymean)
summary(dailymean)
summary(daily)
head(activity)
g2 <- ggplot(activity, aes(x=steps, y=interval)) + geom_histogram(stat="identity")
g2
g2 <- ggplot(activity, aes(x=interval, y=steps)) + geom_histogram(stat="identity")
g2
which.min(activity$steps)
activity[289,]
sum(activity$steps)/length(activity$date)
sum(activity$steps)
g
sum(daily$steps)
sum(daily$Steps)
summary(daily$Steps)
dailypat <- aggregate(activity$steps, list(activity$interval), mean)
head(dailypat)
colnames(dailypat) <- c("Interval", "Steps")
gpat <- ggplot(dailypat, aes(x=Interval, y=Steps))+geom_line()
gpat
qplot(dailypat$Interval, dailypat$Steps)
str(dailypat$Steps)
str(dailypat$Interval)
summary(dailypat$Steps)
View(activity)
activity2 <- activity$steps[!is.na(activity$steps)]
View(activity)
activity3 <- activity[-(activity$date=="2012-10-01"),]
head(activity3)
activity4 <- activity[-(activity$date==2012-10-01),]
?aggregate
dailypat2 <- aggregate(activity$steps, activity$interval, mean)
dailypat3 <- aggregate(activity, list(activity$interval), mean)
head(dailypat3)
activity5 <- activity[activity$date!=2012-10-01,]
head(activity5)
activity5 <- activity[activity$date!="2012-10-01",]
head(activity5)
a2 <- activity[activity$date!="2012-10-01",]
dp <- aggregate(a2$steps, list(a2$interval), mean)
head(dp)
summary(dp)
dp <- aggregate(a2$steps, list(a2$interval), mean, na.ignore=TRUE)
head(dp)
dp2 <- aggregate(steps~interval, data=activity, mean)
head(dp2)
str(dp2)
g
hist(daily$steps)
hist(as.numeric(daily$steps))
hist(daily$Steps)
hist(daily$Steps, breaks=50)
hist(daily$Steps, breaks=100)
hist(daily$Steps, breaks=50)
d1 <- aggregate(steps~date, data=activity)
d1 <- aggregate(steps~date, data=activity, sum)
head(d1)
hist(d1$steps, breaks=50)
summary(d1)
summary(d1$steps)
head(dp2)
plot(dp2$interval, dp2$steps, type='l')
dpg <- ggplot(dp2, aes(x=inteval, y=steps)) + geom_line()
dpg
dpg <- ggplot(dp2, aes(x=interval, y=steps)) + geom_line()
dpg
?lineplot
?plot
plot(dp2$interval, dp2$steps, type="l")
